// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: kvstores.sql

package sqlc

import (
	"context"
	"database/sql"
)

const deleteAllTemp = `-- name: DeleteAllTemp :exec
DELETE FROM kvstores
WHERE perm = false
`

func (q *Queries) DeleteAllTemp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllTemp)
	return err
}

const deleteKVStoreRecord = `-- name: DeleteKVStoreRecord :exec
DELETE FROM kvstores
WHERE key = $1
  AND rule_name = $2
  AND perm = $3
  AND (session_id = $4 OR $4 IS NULL)
  AND (feature_name = $5 OR $5 IS NULL)
`

type DeleteKVStoreRecordParams struct {
	Key         string
	RuleName    string
	Perm        bool
	SessionID   sql.NullInt64
	FeatureName sql.NullString
}

func (q *Queries) DeleteKVStoreRecord(ctx context.Context, arg DeleteKVStoreRecordParams) error {
	_, err := q.db.ExecContext(ctx, deleteKVStoreRecord,
		arg.Key,
		arg.RuleName,
		arg.Perm,
		arg.SessionID,
		arg.FeatureName,
	)
	return err
}

const getKVStoreRecord = `-- name: GetKVStoreRecord :one
SELECT value
FROM kvstores
WHERE key = $1
  AND rule_name = $2
  AND perm = $3
  AND (session_id = $4 OR $4 IS NULL)
  AND (feature_name = $5 OR $5 IS NULL)
`

type GetKVStoreRecordParams struct {
	Key         string
	RuleName    string
	Perm        bool
	SessionID   sql.NullInt64
	FeatureName sql.NullString
}

func (q *Queries) GetKVStoreRecord(ctx context.Context, arg GetKVStoreRecordParams) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, getKVStoreRecord,
		arg.Key,
		arg.RuleName,
		arg.Perm,
		arg.SessionID,
		arg.FeatureName,
	)
	var value []byte
	err := row.Scan(&value)
	return value, err
}

const insertKVStoreRecord = `-- name: InsertKVStoreRecord :exec
INSERT INTO kvstores (perm, rule_name, session_id, feature_name, key, value)
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertKVStoreRecordParams struct {
	Perm        bool
	RuleName    string
	SessionID   sql.NullInt64
	FeatureName sql.NullString
	Key         string
	Value       []byte
}

func (q *Queries) InsertKVStoreRecord(ctx context.Context, arg InsertKVStoreRecordParams) error {
	_, err := q.db.ExecContext(ctx, insertKVStoreRecord,
		arg.Perm,
		arg.RuleName,
		arg.SessionID,
		arg.FeatureName,
		arg.Key,
		arg.Value,
	)
	return err
}

const updateKVStoreRecord = `-- name: UpdateKVStoreRecord :exec
UPDATE kvstores
SET value = $1
WHERE key = $2
  AND rule_name = $3
  AND perm = $4
  AND (session_id = $5 OR $5 IS NULL)
  AND (feature_name = $6 OR $6 IS NULL)
`

type UpdateKVStoreRecordParams struct {
	Value       []byte
	Key         string
	RuleName    string
	Perm        bool
	SessionID   sql.NullInt64
	FeatureName sql.NullString
}

func (q *Queries) UpdateKVStoreRecord(ctx context.Context, arg UpdateKVStoreRecordParams) error {
	_, err := q.db.ExecContext(ctx, updateKVStoreRecord,
		arg.Value,
		arg.Key,
		arg.RuleName,
		arg.Perm,
		arg.SessionID,
		arg.FeatureName,
	)
	return err
}
